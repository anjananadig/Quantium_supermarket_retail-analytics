# -*- coding: utf-8 -*-
"""Quantium _Retail_supermarket _analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Fjj6Dtnvfbr_76RzHIFB6ao3gnEEW5Xn
"""

!pip install pandas
!pip install openpyxl

import pandas as pd

# Load datasets
transaction_data = pd.read_excel('/content/QVI_transaction_data.xlsx')
purchase_behaviour = pd.read_csv('/content/QVI_purchase_behaviour.csv')

# Preview data
print(transaction_data.head())
print(purchase_behaviour.head())

"""Convert DATE Column to Proper Date Format"""

transaction_data['DATE'] = pd.to_datetime(transaction_data['DATE'], origin='1899-12-30', unit='D')
print(transaction_data['DATE'].head())

"""Check for Missing Values"""

print("Missing Values in Transaction Data:")
print(transaction_data.isnull().sum())

print("\nMissing Values in Purchase Behaviour Data:")
print(purchase_behaviour.isnull().sum())

"""Drop Duplicates"""

transaction_data = transaction_data.drop_duplicates()
purchase_behaviour = purchase_behaviour.drop_duplicates()

"""Extract PACK_SIZE from PROD_NAME"""

transaction_data['PACK_SIZE'] = transaction_data['PROD_NAME'].str.extract(r'(\d+g)').astype(str)
print(transaction_data['PACK_SIZE'].head())

"""Extract BRAND from PROD_NAME



"""

transaction_data['BRAND'] = transaction_data['PROD_NAME'].str.split(' ', expand=True)[0]
print(transaction_data['BRAND'].head())

"""Merge Datasets Use LYLTY_CARD_NBR as the key"""

merged_data = pd.merge(transaction_data, purchase_behaviour, on='LYLTY_CARD_NBR', how='left')

# Preview the merged data
print("Merged Data:")
print(merged_data.head())

"""Save the Cleaned Data"""

merged_data.to_csv('cleaned_data.csv', index=False)
print("Cleaned data saved as 'cleaned_data.csv'")

"""Data Exploration
1. Summary Statistics
"""

# Summary statistics for numerical columns
print("Numerical Data Summary:")
print(merged_data.describe())

# Summary statistics for categorical columns
print("Categorical Data Summary:")
print(merged_data.describe(include='object'))

"""2. Understanding Customer Segments -
Analyze customer segments by LIFESTAGE and PREMIUM_CUSTOMER:
"""

# Group by Lifestage and Premium Customer
customer_segments = merged_data.groupby(['LIFESTAGE', 'PREMIUM_CUSTOMER']).agg({
    'TOT_SALES': 'sum',
    'LYLTY_CARD_NBR': 'nunique'
}).rename(columns={'LYLTY_CARD_NBR': 'UNIQUE_CUSTOMERS'}).reset_index()

# Sort by total sales
customer_segments = customer_segments.sort_values(by='TOT_SALES', ascending=False)

print("Customer Segments Summary:")
print(customer_segments)

"""Analyze Purchasing Behavior"""

# Group by Brand and calculate total sales
chip_sales = merged_data.groupby('BRAND').agg({'TOT_SALES': 'sum'}).reset_index()

# Sort by total sales
chip_sales = chip_sales.sort_values(by='TOT_SALES', ascending=False)

print("Top Selling Chips Brands:")
print(chip_sales.head())

# Group by Pack Size
pack_size_trends = merged_data.groupby('PACK_SIZE').agg({'TOT_SALES': 'sum'}).reset_index()

# Sort by total sales
pack_size_trends = pack_size_trends.sort_values(by='TOT_SALES', ascending=False)

print("Pack Size Preferences:")
print(pack_size_trends.head())

# Average spend by customer
average_spend = merged_data.groupby('LYLTY_CARD_NBR')['TOT_SALES'].mean().reset_index()
print("Average Spend per Customer:")
print(average_spend.describe())

"""Identify High-Value Segments"""

# Sales contribution by segment
high_value_segments = merged_data.groupby(['LIFESTAGE', 'PREMIUM_CUSTOMER']).agg({'TOT_SALES': 'sum'}).reset_index()

# Sort by total sales
high_value_segments = high_value_segments.sort_values(by='TOT_SALES', ascending=False)

print("High Value Customer Segments:")
print(high_value_segments)

import matplotlib.pyplot as plt
import seaborn as sns

# Top 10 chip brands by sales
plt.figure(figsize=(10, 6))
sns.barplot(data=chip_sales.head(10), x='TOT_SALES', y='BRAND', palette='viridis')
plt.title("Top 10 Chip Brands by Sales")
plt.xlabel("Total Sales")
plt.ylabel("Brand")
plt.show()

# Pack size trends
plt.figure(figsize=(10, 6))
sns.barplot(data=pack_size_trends.head(10), x='TOT_SALES', y='PACK_SIZE', palette='plasma')
plt.title("Pack Size Preferences by Sales")
plt.xlabel("Total Sales")
plt.ylabel("Pack Size")
plt.show()

# Sales contribution by customer segment
plt.figure(figsize=(12, 8))
sns.barplot(data=high_value_segments, x='TOT_SALES', y='LIFESTAGE', hue='PREMIUM_CUSTOMER', palette='cool')
plt.title("Sales by Customer Segment")
plt.xlabel("Total Sales")
plt.ylabel("Lifestage")
plt.legend(title="Premium Customer")
plt.show()

# Convert 'DATE' to datetime format
merged_data['DATE'] = pd.to_datetime(merged_data['DATE'])

# Group by date and calculate total sales
sales_trend = merged_data.groupby('DATE')['TOT_SALES'].sum().reset_index()

import seaborn as sns
import matplotlib.pyplot as plt

# Set the style of seaborn for better aesthetics
sns.set(style="whitegrid")

# Plot the sales trend using seaborn
plt.figure(figsize=(12, 6))
sns.lineplot(x='DATE', y='TOT_SALES', data=sales_trend, marker='o')
plt.title('Total Sales Over Time', fontsize=16)
plt.xlabel('Date', fontsize=12)
plt.ylabel('Total Sales', fontsize=12)
plt.show()